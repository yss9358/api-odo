<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ss">
	<!-- 쿼리문작성 -->
	<!-- <![CDATA[]]> -->
	
	<resultMap id="attenMap" type="java.util.Map">
		<result property="className" column="className"/>
		<result property="startDate" column="startDate"/>
		<result property="endDate" column="endDate"/>
		<result property="attenDate" column="attenDate"/>
		<result property="attenType" column="attenType"/>
	</resultMap>
	
	<resultMap id="review" type="java.util.Map">
		<result property="classNo" column="classNo" />
		<result property="classImage" column="classImage" />
		<result property="className" column="className" />
		<result property="classIntro" column="classIntro" />
		<result property="classType" column="classType" />
		<result property="startDate" column="startDate" />
		<result property="endDate" column="endDate" />
		<result property="scheduleNo" column="scheduleNo" />
		<result property="reviewNo" column="reviewNo" />
		<result property="reviewDate" column="reviewDate" />
		<result property="reviewPoint" column="reviewPoint" />
		<result property="reviewQ1" column="reviewQ1" />
		<result property="reviewQ2" column="reviewQ2" />
		<result property="reviewQ3" column="reviewQ3" />
		<result property="reviewContent" column="reviewContent" />
		<result property="reviewImage" column="reviewImage" />
	</resultMap>
	
	<resultMap id="classInfo" type="java.util.Map">
		<result property="classNo" column="classNo"/>
		<result property="totalCount" column="totalCount"/>
		<result property="reviewAvg" column="reviewAvg"/>
	</resultMap>
	
	
	<!-- 아이디 중복확인 -->
	<select id="checkId" parameterType="String" resultType="com.javaex.vo.UserJoinVo">
		<![CDATA[
			select	user_id userId
			from user
			where user_id = #{id}
		]]>
	</select>
	
	<!-- 일반회원 회원가입 -->
	<insert id="insertUser" parameterType="com.javaex.vo.UserJoinVo">
		<![CDATA[
			insert into user
			values(null, #{userId}, #{userPw}, #{userName},#{userNickname}, #{userHp}, #{userBirth}, #{userGender}, null, false, false)
		]]>
	</insert>
	
	<!-- 일반회원 로그인 -->
	<select id="loginByIdPw" parameterType="com.javaex.vo.UserJoinVo" resultType="com.javaex.vo.UserJoinVo">
		<![CDATA[
			select	user_no userNo,
					user_nickname userNickname,
					user_id userId,
					user_image userImage,
					user_kakao userKakao,
					user_naver userNaver
			from user
			where user_id = #{userId}
			and user_pw = #{userPw}
		]]>
	</select>
	
	<!-- 회원의 결제 내역 가져오기  -->
	<select id="getPayListByNo" parameterType="map" resultType="com.javaex.vo.MyPayVo">
		<![CDATA[
			select	p.user_no userNo,
					c.class_type classType,
			        c.class_no classNo,
					c.class_image classImage,
			        s.end_date endDate,
			        IFNULL(w.w_class_no,0) wishClassNo,
					IFNULL(avg_review.avg_review_point,0) starScore,
					p.pay_no payNo,
			        p.pay_date payDate,
			        c.class_name className,
			        c.class_intro classIntro,
			        p.pay_price payPrice,
			        IFNULL(a.attenCount, 0) attenCount,
			        p.schedule_no scheduleNo,
			        IFNULL(r.review_no, 0) reviewNo,
			        c.class_url classUrl,
			        IFNULL(selfC.class_no,0) recClassNo,
			        selfC.class_image recClassImage,
			        selfC.class_name recClassName
			from pay p
			inner join schedule s 
					on p.schedule_no = s.schedule_no
			inner join class c
					on s.class_no = c.class_no
			left join wish_class w
					on p.user_no = w.user_no and c.class_no = w.class_no
			left join review r
					on r.user_no = p.user_no and r.schedule_no = s.schedule_no
			left join class selfC
					on c.rec_class_no = selfC.class_no
			left join (select	schedule_no,
								count(*) attenCount
						from attendance
						where atten_type = '출석'
						and user_no = #{userNo}
			            group by schedule_no) a
					on s.schedule_no = a.schedule_no
			left join (select	c.class_no,
								AVG(r.review_point) avg_review_point
						from class c
			            inner join schedule s
								on c.class_no = s.class_no
						left join review r
								on s.schedule_no = r.schedule_no
						group by c.class_no) avg_review
					on c.class_no = avg_review.class_no
			where p.user_no = #{userNo}
		]]>
		<if test="classType == 1">
		<![CDATA[
			and c.class_type = 1
		]]>
		</if>
		<if test="classType != 1">
		<![CDATA[
			and c.class_type <> 1
		]]>
		</if>
		<![CDATA[
			order by p.pay_date desc
			limit #{startRowNo}, #{listCount}
		]]>
	</select>
	
	<!-- 리뷰쓸때 클래스 한개 데이터 가져오기 -->
	<select id="getClassOne" parameterType="int" resultType="com.javaex.vo.OneClassVo">
		<![CDATA[
			select	c.class_no classNo,
					c.class_image classImage,
					c.class_name className,
			        c.class_intro classIntro,
			        c.class_type classType,
					s.schedule_no scheduleNo,
					s.start_date startDate, 
					s.end_date endDate
			from schedule s
			inner join class c
					on s.class_no = c.class_no
			where s.schedule_no = #{no}
		]]>
	</select>
	
	<!-- 리뷰 작성 -->
	<insert id="insertReview" parameterType="com.javaex.vo.ReviewVo">
		<![CDATA[
			insert into review
			values(null, #{scheduleNo}, #{userNo}, #{reviewImage}, #{reviewPoint}, #{reviewContent}, #{reviewQ1}, #{reviewQ2}, #{reviewQ3}, now())
		]]>
	</insert>
	
	<!-- 작성한 리뷰 정보 가져오기 -->
	<select id="getReivew" parameterType="map" resultMap="review">
		<![CDATA[
			select	c.class_no classNo,
					c.class_image classImage,
					c.class_name className,
					c.class_intro classIntro,
			        c.class_type classType,
			        s.start_date startDate,
			        s.end_date endDate,
			        s.schedule_no scheduleNo,
			        r.review_no reviewNo,
			        r.review_date reviewDate,
			        r.review_point reviewPoint,
			        r.review_q1 reviewQ1,
			        r.review_q2 reviewQ2,
			        r.review_q3 reviewQ3,
			        r.review_content reviewContent,
		         	ifnull(r.review_image, 0) reviewImage
			from review r
			inner join schedule s
					on r.schedule_no = s.schedule_no
			inner join class c
					on s.class_no = c.class_no
			where r.user_no = #{userNo}
			and r.review_no = #{reviewNo}
		]]>
	</select>
	
	<!-- 리뷰 수정하기 -->
	<update id="updateReview" parameterType="com.javaex.vo.ReviewVo">
		<![CDATA[
			update review
			set review_point = #{reviewPoint},
				review_q1 = #{reviewQ1},
			    review_q2 = #{reviewQ2},
			    review_q3 = #{reviewQ3},
			    review_content = #{reviewContent},
			    review_date = now()
		]]>	
		<if test="file != null">
			,review_image = #{reviewImage}
		</if>	    
		<![CDATA[
			where user_no = #{userNo}
			and review_no = #{reviewNo}
		]]>	
	</update>
	
	<!-- 출석정보 가져오기 -->
	<select id="getAttenList" parameterType="map" resultMap="attenMap">
		<![CDATA[
			select  a.atten_date attenDate,
					a.atten_type attenType
			from attendance a
			inner join schedule s
					on s.schedule_no = a.schedule_no
			inner join class c
					on c.class_no = s.class_no
			where s.schedule_no = #{scheduleNo}
			and a.user_no = #{userNo}
			order by atten_date desc
		]]>
	</select>
	
	<!-- 출석횟수 가져오기 -->
	<select id="getAttenCount" parameterType="map" resultType="int">
		<![CDATA[
			select	count(atten_type)
			from attendance
			where user_no = #{userNo}
			and schedule_no = #{scheduleNo}
			and atten_type= '출석'
		]]>
	</select>
	
	<!-- 회원의 쿠폰정보 가져오기 -->
	<select id="getCouponByNo" parameterType="int" resultType="com.javaex.vo.CouponVo">
		<![CDATA[
			select	c.coupon_no couponNo,
					c.user_no userNo,
			        cp.company_name companyName,
			        c.coupon_price couponPrice,
			        c.coupon_date couponDate,
			        c.coupon_state couponState
			from coupon c, user u, company cp
			where c.user_no = u.user_no
			and c.company_no = cp.company_no
			and u.user_no = #{no}
		]]>
	</select>
	
	<!-- 리뷰페이지 - 클래스 리뷰 가져오기 -->
	<select id="getClassReviewList" parameterType="map" resultType="com.javaex.vo.ClassReviewVo">
		<![CDATA[
			select	c.class_no classNo,
					c.class_type classType,
					c.class_name className,
			        c.class_intro classIntro,
			        u.user_no userNo,
			        u.user_image userImage,
			        u.user_nickname userNickname,
			        r.review_point reviewPoint,
			        r.review_date reviewDate,
			        r.review_content reviewContent,
			        ifnull(r.review_image, null) reviewImage
			from review r
			inner join user u
					on r.user_no = u.user_no
			inner join schedule s
					on r.schedule_no = s.schedule_no
			inner join class c
					on s.class_no = c.class_no
			where c.class_no = #{classNo}
		]]>
		<if test="type == 0">
			<![CDATA[
				order by r.review_point desc
			]]>
		</if>
		<if test="type == 1">
			<![CDATA[
				order by r.review_point asc
			]]>
		</if>
		<if test="type ==2">
			<![CDATA[
				order by r.review_date desc
			]]>
		</if>
		<![CDATA[
			limit #{startRowNo}, #{listCount}
		]]>
	</select>
	
	<!-- 리뷰페이지 - 클래스 정보 가져오기 -->
	<select id="getClassInfo" parameterType="int" resultMap="classInfo">
		<![CDATA[
			select	 s.class_no classNo,
					count(*) totalCount,
					ifnull(avg(r.review_point),0) reviewAvg
			from review r
			inner join schedule s
					on r.schedule_no = s.schedule_no
			where s.class_no = #{classNo}
			group by s.class_no
		]]>
	</select>
	
	<!-- 위시 클래스 추가 -->
	<insert id="insertWishClass" parameterType="com.javaex.vo.CheckWishClassVo">
		<![CDATA[
			insert into wish_class
			values(null, #{classNo}, #{userNo}, now())
		]]>
	</insert>
	
	<!-- 위시 클래스 삭제 -->
	<delete id="deleteWishClass" parameterType="com.javaex.vo.CheckWishClassVo">
		<![CDATA[
			delete from wish_class
			where w_class_no = #{wClassNo}
			and user_no = #{userNo}
			and class_no = #{classNo}
		]]>
	</delete>
	
	
	

</mapper>