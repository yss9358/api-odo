<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sr">
	<!-- 쿼리문작성 -->
	<resultMap type="com.javaex.vo.SolClassVo"
		id="resultMapClassVo">
		<result column="schedule_no" property="scheduleNo"></result>
		<result column="class_no" property="classNo"></result>
		<result column="company_no" property="companyNo"></result>
		<result column="cate1_no" property="cate1No"></result>
		<result column="cate1_name" property="cate1Name"></result>
		<result column="cate2_no" property="cate2No"></result>
		<result column="cate2_name" property="cate2Name"></result>
		<result column="class_name" property="className"></result>
		<result column="class_type" property="classType"></result>
		<result column="class_intro" property="classIntro"></result>
		<result column="class_zipcode" property="classZipcode"></result>
		<result column="class_name_address" property="classNameAddress"></result>
		<result column="class_num_address" property="classNumAddress"></result>
		<result column="class_detail_address"
			property="classDetailAddress"></result>
		<result column="class_latitude" property="classLatitude"></result>
		<result column="class_longitutde" property="classLongitutde"></result>
		<result column="class_image" property="classImage"></result>
		<result column="class_price" property="classPrice"></result>
		<result column="class_min" property="classMin"></result>
		<result column="class_max" property="classMax"></result>
		<result column="class_info" property="classInfo"></result>
		<result column="class_url" property="classUrl"></result>
		<result column="rec_class_no" property="recClassNo"></result>
		<result column="start_date" property="startDate"></result>
		<result column="end_date" property="endDate"></result>
	</resultMap>
	<resultMap type="com.javaex.vo.SolListVo" id="rmListVo">
		<result column="company_no" property="companyNo"></result>
		<result column="class_no" property="classNo"></result>
		<result column="class_price" property="classPrice"></result>
		<result column="class_type" property="classType"></result>
		<result column="class_image" property="classImage"></result>
		<result column="class_name" property="className"></result>
		<result column="class_intro" property="classIntro"></result>
		<result column="class_zipcode" property="classZipcode"></result>
		<result column="class_name_address" property="classNameAddress"></result>
		<result column="class_num_address" property="classNumAddress"></result>
		<result column="class_detail_address"
			property="classDetailAddress"></result>
		<result column="class_latitude" property="classLatitude"></result>
		<result column="class_longitutde" property="classLongitutde"></result>
		<result column="class_latitude" property="classPrice"></result>
		<result column="class_min" property="classMin"></result>
		<result column="class_max" property="classMax"></result>
		<result column="review" property="review"></result>
		<result column="wish" property="wish"></result>
		<result column="startRow" property="startRow"></result>
		<result column="listCount" property="listCount"></result>
	</resultMap>
	<resultMap type="com.javaex.vo.SolCateVo"
		id="resultMapCateVo">
		<result column="cate1_no" property="cate1No"></result>
		<result column="cate2_no" property="cate2No"></result>
		<result column="cate1_name" property="cate1Name"></result>
		<result column="cate2_name" property="cate2Name"></result>
	</resultMap>
	<resultMap type="com.javaex.vo.SolMemberVo" id="rmMemberVo">
		<result column="user_no" property="userNo"></result>
		<result column="user_name" property="userName"></result>
		<result column="user_birth" property="userAge"></result>
		<result column="user_gender" property="userGender"></result>
		<result column="user_hp" property="userHp"></result>
		<result column="attend" property="attend"></result>
		<result column="atten_type" property="attendState"></result>
		<result column="review_no" property="reviewState"></result>
		<result column="coupon_no" property="couponState"></result>
		<result column="start_date" property="startDate"></result>
		<result column="end_date" property="endDate"></result>
	</resultMap>
	<resultMap type="com.javaex.vo.SolScheduleVo"
		id="rmScheduleVo">
		<result column="schedule_no" property="scheduleNo"></result>
		<result column="company_no" property="companyNo"></result>
		<result column="class_name" property="title"></result>
		<result column="start_date" property="start"></result>
		<result column="end_date" property="end"></result>
	</resultMap>
	<!-- <![CDATA[]]> -->

	<!-- 사업자 ********************************** -->
	<!-- 아이디 중복체크 -->
	<select id="companyId" parameterType="string"
		resultType="string">
	<![CDATA[
		select company_id from company
		where company_id = #{companyid}
	]]>
	</select>

	<!-- 회원가입 -->
	<insert id="companyInsert" parameterType="CompanyVo">
	<![CDATA[
		insert into company 
		values(null, #{companyName}, #{companyId}, #{companyPass}, #{companyBn}, 
		#{companyImage}, 
		#{companyZipCode}, #{companyNameAddress}, #{companyNumAddress}, #{companyDetailAddress}, 
		#{companyLatitude}, #{companyLongitude}, 
		#{companyHp}, #{companyIntro})
	]]>
	</insert>

	<!-- 사업자 로그인 -->
	<select id="companyLogin" parameterType="CompanyVo"
		resultType="CompanyVo">
	<![CDATA[
		select company_no companyNo, company_id companyId, 
			   company_name companyName, company_image companyImage
		from company
		where company_id = #{companyId}
		and company_pw = #{companyPass}
	]]>
	</select>


	<!-- 클래스 ********************************** -->
	<!-- 클래스 등록 -->
	<insert id="classInsert" parameterType="classVo">
	<![CDATA[
	insert into class
	values(null, #{companyNo},#{cate2No} ,#{className} ,#{classType} ,#{classIntro} , 
		#{classZipcode}, #{classNameAddress} ,#{classNumAddress}, 
		#{classDetailAddress},#{classLatitude},#{classLongitutde},
		#{classImage},#{classPrice} ,#{classMin},#{classMax}, 
		#{classInfo}, #{classUrl}, #{recClassNo})
	]]>
		<selectKey keyProperty="classNo" resultType="int"
			order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 일정등록 -->
	<insert id="scheduleInsert"
		parameterType="com.javaex.vo.SolScheduleVo">
	<if test="end == null">
	<![CDATA[
	insert into schedule
	values(null, #{companyNo}, #{start}, null)
	]]>
	</if>
	<if test="end != null">
	<![CDATA[
	insert into schedule
	values(null, #{companyNo}, #{start}, #{end})
	]]>
	</if>
	</insert>

	<!-- 클래스 수정 -->
	<update id="classUpdate" parameterType="classVo">
	<![CDATA[
	update class 
	set class_name = #{className},
		class_intro = #{classIntro},
    	class_name_address = #{classNameAddress},
    	class_num_address = #{classNumAddress},
    	cate2_no = #{cate2No},
    	class_price = #{classPrice},
    	class_min = #{classMin},
    	class_max = #{classMax},
    	class_info = #{classInfo},
    	rec_class_no = #{recClassNo},
    	class_image = #{classImage}
	where class_no = #{classNo}
	]]>
	</update>
	<!-- 수정할 일정 -->
	<!-- <select id="updateScheduleSelect">
	<![CDATA[
	select schedule_no from schedule
    where class_no = 1
	]]>
	</select>-->
	<!-- 일정수정 -->
	<update id="scheduleUpdate" parameterType="com.javaex.vo.SolScheduleVo">
	<![CDATA[
	update schedule set
	start_date = #{start}
	]]>
	<if test="end != null">
	<![CDATA[
	,end_data = #{end}
	]]>
	</if>
	<![CDATA[
	where schedule_no = #{scheduleNo}
	]]>
	</update>
	<!-- 회사별 클래스리스트 -->
	<select id="companyClassList" parameterType="map"
		resultType="classVo">
	<![CDATA[
		select class_no classNo, class_name className, class_image classImage
		from class 
		where company_no = #{no}
		and class_type = #{type}
	]]>
	</select>


	<!-- 이전클래스 불러오기(수정할 클래스) -->
	<select id="getClass" parameterType="classVo"
		resultMap="resultMapClassVo">
	<![CDATA[
	select c.class_no, c.company_no, c.class_name, c.class_intro, 
		c.class_zipcode, c.class_name_address, c.class_num_address, 
		c.class_detail_address, c.class_latitude, c.class_longitutde,
		c.cate2_no, t.cate1_no, c.class_type,
		c.class_price, c.class_min, c.class_max,
		c.class_info, c.rec_class_no
	from class c, cate1 t, cate2 t2
	where c.company_no = #{companyNo}
	and c.class_no = #{classNo}
	and c.cate2_no = t2.cate2_no
	and t.cate1_no = t2.cate1_no
	]]>
	</select>
	<!-- 스케줄 불러오기 -->
	<select id="selectschedule" parameterType="int" resultMap="rmScheduleVo">
	<![CDATA[
	select schedule_no, start_date, end_date 
	from schedule
	where class_no = #{classNo}
	and end_date > now()
	]]>
	</select>

	<!-- 정규클래스 불러오기 -->
	<select id="rCalss" parameterType="int"
		resultMap="resultMapClassVo">
	<![CDATA[
	select class_no, class_name, class_image classImage
	from class 
	where company_no = #{no}
	and class_type between 2 and 3
	]]>
	</select>

	<!-- 1차 카테고리 불러오기 -->
	<select id="selectAllCate1" resultMap="resultMapCateVo">
	<![CDATA[
	select c2.cate1_no, c1.cate1_name
	from cate1 c1, cate2 c2
	where c1.cate1_no = c2.cate1_no
	group by c1.cate1_no
	]]>
	</select>

	<!-- 2차카테고리 불러오기 -->
	<select id="selectCate2" parameterType="int"
		resultMap="resultMapCateVo">
	<![CDATA[
	select c2.cate2_no, c2.cate2_name
	from cate1 c1, cate2 c2
	where c1.cate1_no=c2.cate1_no
	and c1.cate1_no = #{cate1No}
	]]>
	</select>

	<!-- 리스트 ********************************** -->
	<!-- 클래스리스트 -->
	<select id="classList" parameterType="map"
		resultMap="resultMapClassVo">
	<if test="classType == 1">
	<![CDATA[
	select c.class_no, c.company_no, c.class_name, 
		c.class_intro, c.class_type,c.class_image,
         c.class_max, coalesce(const.class_min, 0) class_min
	from class c left join
    (select class_no, count(class_no) class_min
	 from pay p join schedule s
     on p.schedule_no = s.schedule_no
     where s.class_no in (
     select class_no from class where class_type = #{classType})
     group by class_no) const
	on c.class_no = const.class_no
	where c.company_no = #{companyNo}
	and class_type = #{classType}
    order by c.class_no
	]]>
	</if>
	<if test="classType != 1">
	<![CDATA[
	select s.schedule_no, c.class_no, c.company_no, c.class_name, 
		c.class_intro, c.class_type,c.class_image,
        date_format(s.start_date, '%Y/%m/%d') start_date, date_format(s.end_date, '%Y/%m/%d') end_date,
        (select count(p.schedule_no) 
		from pay p 
		where s.schedule_no = p.schedule_no
		and c.class_type = #{classType}
		group by s.schedule_no) class_min, c.class_max
	from class c, schedule s
	where c.company_no = #{companyNo}
	and class_type = #{classType}
    and c.class_no = s.class_no
    order by s.schedule_no
	]]>
	</if>
	
	</select>

	<!-- 정규회원 리스트 -->
	<select id="RMemberList" parameterType="int"
		resultMap="rmMemberVo">
	<![CDATA[
	select p.schedule_no, u.user_no, u.user_name, u.user_hp,
	   u.user_gender, 2024 - SUBSTRING(u.user_birth, 1, 4) + 1 as user_birth,
       a.atten, r.review_no, a.atten_type,
       date_format(s.start_date, "%Y-%m-%d") start_date, date_format(s.end_date, "%Y-%m-%d") end_date
	from pay p inner join user u 
	on p.user_no = u.user_no left outer join 
	(select count(atten_no) atten, atten_type, user_no from attendance
	where schedule_no =#{scheduleNo}
	group by user_no) a
	on u.user_no = a.user_no left outer join 
	(select review_no, user_no from review
	where schedule_no = #{scheduleNo}) r
	on a.user_no = r.user_no left outer join
	(select schedule_no, start_date, end_date from schedule
	where schedule_no = #{scheduleNo}) s
	on p.schedule_no = s.schedule_no
	where s.schedule_no = #{scheduleNo}
	]]>
	</select>

	<!-- 원데이회원 -->
	<select id="oneMeberList" parameterType="int"
		resultMap="rmMemberVo">
	<![CDATA[
	select p.schedule_no, u.user_no, u.user_name, u.user_hp,
	   u.user_gender, 2024 - SUBSTRING(u.user_birth, 1, 4) + 1 as user_birth,
       a.atten_no, r.review_no
	from pay p inner join user u 
	on p.user_no = u.user_no left outer join 
	(select atten_no, user_no from attendance
	where schedule_no =#{scheduleNo}) a
	on u.user_no = a.user_no left outer join 
	(select review_no, user_no from review
	where schedule_no = #{scheduleNo}) r
	on a.user_no = r.user_no
	where schedule_no = #{scheduleNo}
	]]>
	</select>
	<!-- 기본가장 최근일정 -->
	<select id="maxSchedule" parameterType="int" resultMap="rmScheduleVo">
	<![CDATA[
	select s.schedule_no, s.start_date
	from schedule s, class c
	where s.class_no = c.class_no
	and c.class_no = #{classNo}
	order by s.start_date desc
	limit 1	
	]]>
	</select>
	<!-- 원데이 일정표 불러오기 -->
	<select id="ondayScheduleList" parameterType="int" resultMap="rmScheduleVo">
	<![CDATA[
	select s.schedule_no, s.start_date
	from schedule s, class c
	where s.class_no = c.class_no
	and s.class_no = #{classNo}
	]]>
	</select>

	<!-- 스케줄 불러오기 -->
	<select id="selectSchedule" parameterType="int"
		resultMap="rmScheduleVo">
	<![CDATA[
	select c.class_name, s.start_date, s.end_date
	from schedule s, class c
	where s.class_no = c.class_no
	and c.company_no =#{no}
	]]>
	</select>

	<!-- 쿠폰발급 -->
	<insert id="insertCoupon" parameterType="map">
	<![CDATA[
		insert into coupon values(null, #{userNo}, #{companyNo}, #{couponPrice}, now(), 0)
	]]>
	</insert>

	<!-- 검색 ********************************** -->
	<!-- 지역리스트 -->
	<select id="addressList" parameterType="com.javaex.vo.SolListVo" resultMap="rmListVo">
	<![CDATA[
	select c.class_no, c.class_name, c.class_image, class_price, 
	   c.class_intro, c.class_name_address,
	   c.class_latitude, c.class_longitutde,
	   r.review, w.w_class_no wish
	from class c left outer join
	(select s.class_no, sum(r.review_point) review, s.end_date
	from schedule s left outer join review r
	on s.schedule_no = r.schedule_no
	group by s.class_no) r
	on c.class_no = r.class_no
	left outer join
	(select class_no,w_class_no
	from wish_class
	where user_no = #{userNo}) w
	on c.class_no = w.class_no
	where r.end_date > now()
	]]>
	<if test="isFind == 2">
	<![CDATA[
	and class_name_address like #{keyword}
	and class_num_address like #{keyword}
	order by abs(c.class_latitude-#{}),
		 	 abs(c.class_longitutde-#{})
	]]>
	</if>
	<if test="isFind == 1">
	<![CDATA[
	and class_name like #{keyword}
	]]>
	</if>
	<if test="classType != 4">
	<![CDATA[
	and c.class_type = #{classType}
	]]>
	</if>
	<![CDATA[
	limit #{startRow}, #{listCount}
	]]>
	</select>
	
	<!-- 위시 추가/삭제 -->
	<insert id="insertWish" parameterType="map">
	<![CDATA[
	insert into wish_class values(null, #{classNo}, #{userNo}, now())
	]]>
	</insert>
	<delete id="deleteWish" parameterType="map">
	<![CDATA[
	delete from wish_class
	where user_no = #{userNo}
	and class_no = #{classNo}
	]]>
	</delete>
	
	

</mapper>